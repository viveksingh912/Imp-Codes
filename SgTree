class SgTree{
    vector<int> tree;
    public:
    SgTree(int n){
        // tree=vector<int>(4*n+1);
        // or or
        tree.resize(4*n+1);
    }
int query(int node,int start,int end,int left,int right){
    if(start>right || end<left)
    return -1e15;;
    if(start==end)
    return tree[node];
    if(left<=start && right>=end)
    return tree[node];
    else{
        int mid=(start+end)/2;
        int l=query(node*2,start,mid,left,right);
        int r=query(node*2+1,mid+1,end,left,right);
        return max(l,r);
    }
}
int build(int node,int start,int end,int *arr){
    if(start==end){
        tree[node]=arr[start];
        return node;
    }
    int mid=(start+end)/2;
    int left=build(node*2,start,mid,arr);
    int right=build(node*2+1,mid+1,end,arr);
    tree[node]=max(tree[left],tree[right]);
    return node;
}
void update(int node,int start,int end,int pos,int element){
    if(start==end){
        // arr[start]=element;
        tree[node]=element;return;
    }
    int mid=(start+end)/2;
    if(pos>=start && pos<=mid){
        update(node*2,start,mid,pos,element);
    }
    else{
        update(node*2+1,mid+1,end,pos,element);
    }
    tree[node]=max(tree[node*2],tree[node*2+1]);
}
};
