class LCA
{
public:
     vector<vector<pair<int,int>>> adj;
     vector<vector<int>> up;
     vector<int> level, dist;
     int n,K;
     LCA(int _n):n(_n){
          K=21;
          adj.resize(_n);
          up.assign(_n,vector<int>(K,-1));
          level.resize(_n);
          dist.resize(_n);
     }
     void addEdge(int u,int v,int w=1){
          adj[u].emplace_back(v,w);
          adj[v].emplace_back(u,w);
     }
     void dfs(int u, int p = -1)
     {
         for(auto &[to,w]:adj[u]){
               if(to==p)continue;
               dist[to]=dist[u]+w;
               level[to]=level[u]+1;
               up[to][0]=u;
               for(int i=1;i<K;i++){
                    if(up[to][i-1]!=-1)
                    up[to][i]=up[up[to][i-1]][i-1];
               }
               dfs(to,u);
         }
     }
     int dist_lca(int u, int v)
     {
          if (level[u] < level[v])
               swap(u, v);
          int uu = u, vv = v;
          for (int i = K - 1; i >= 0; i--)
          {
               if (level[u] - level[v] >= (1LL << i))
               {
                    u = up[u][i];
               }
          }
          if (u == v)
               return dist[uu] - dist[vv];
          for (int i = K - 1; i >= 0; i--)
          {
               if (up[u][i] != up[v][i])
               {
                    u = up[u][i];
                    v = up[v][i];
               }
          }
          // Lca is just one step above the node
          int lca = up[u][0];
          // In case of weight on node add dist[lca];
          return dist[uu] + dist[vv] - 2 * dist[lca];
     }
};
