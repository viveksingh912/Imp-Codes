const int mod=1e18;
class sgTree{
	vector<int> tree;
	vector<int> lazy;
	public:
	sgTree(int n){
		tree.assign(4*n,0);
		lazy.assign(4*n,0);
	}
	inline void propogate(int node,int s,int e){
		if(!lazy[node])return;
		tree[node]=(tree[node]+(lazy[node]*(e-s+1)))%mod;
		if(s!=e){
			lazy[node*2+1]+=lazy[node];
			lazy[node*2+1]%=mod;
			lazy[node*2+2]+=lazy[node];
			lazy[node*2+2]%=mod;
		}
		lazy[node]=0;
	}
	void build(int node,int start,int end,vector<int> &arr){
		if(start==end){
			tree[node]=arr[start]%mod;
			return;
		}
		int mid=(start+end)/2;
		build(node*2+1,start,mid,arr);
		build(node*2+2,mid+1,end,arr);
		tree[node]=(tree[2*node+1]+tree[2*node+2])%mod;
	}
	int query(int node,int start,int end,int l,int r){
	propogate(node,start,end);
        if(start>r || end<l)
        return 0;
        if(start>=l && end<=r){
            return tree[node]%mod;
        }
        int mid=(start+end)>>1;
        int left=query(node*2+1,start,mid,l,r);
        int right=query(node*2+2,mid+1,end,l,r);
        return (left+right)%mod;
    }
	void update(int node,int start,int end,int l,int r,int val){
        if(start>r || end<l){
        return;
        }	
        if(start>=l && end<=r){
			lazy[node]+=val;
			lazy[node]%=mod;
			return ;
        }
       int mid=(start+end)/2;
       update(node*2+1,start,mid,l,r,val);
       update(node*2+2,mid+1,end,l,r,val);
       // It's more efficient because we're updating and propogating only while querying
    }
};
