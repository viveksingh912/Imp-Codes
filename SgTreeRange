#include<bits/stdc++.h>
using namespace std;
class SgTree{
    public:
    vector<int> tree;
    vector<int> lazy;
    SgTree(int n){
        tree.resize(4*n+1);
        lazy.resize(4*n+1);
    }
    void build(int node,int start,int end,vector<int> &arr){
        if(start==end){
            tree[node]=arr[start];
            return;
        }
        int mid=(start+end)>>1;
        build(node*2,start,mid,arr);
        build(node*2+1,mid+1,end,arr);
        tree[node]=tree[node*2]+tree[node*2+1];
    }
    void update(int node,int start,int end,int l,int r,int val){
        if(start>r || end<l){
        return;
        }
        if(lazy[node]!=0){
            tree[node]+=abs(end-start+1)*lazy[node];
            if(start!=end){
                lazy[node*2]+=lazy[node];
                lazy[node*2+1]+=lazy[node];
        }
            lazy[node]=0;
        }
        if(start>=l && end<=r){
            tree[node]+=abs(end-start+1)*val;
            if(start!=end){
                lazy[2*node]+=val;
                lazy[2*node+1]+=val;
            }
            return;
        }
        else{
            int mid=(start+end)/2;
            update(node*2,start,mid,l,r,val);
            update(node*2+1,mid+1,end,l,r,val);
            tree[node]=tree[node*2]+tree[node*2+1];
        }
    }
    int query(int node,int start,int end,int l,int r){
        if(start>r || end<l)
        return 0;
        if(lazy[node]!=0){
            tree[node]+=abs(end-start+1)*lazy[node];
            if(start!=end){
                lazy[node*2]+=lazy[node];
                lazy[node*2+1]+=lazy[node];
            }
            lazy[node]=0;
        }
        if(start>=l && end<=r){
            return tree[node];
        }
        else{
            int mid=(start+end)>>1;
            int left=query(node*2,start,mid,l,r);
            int right=query(node*2+1,mid+1,end,l,r);
            return (left+right);
        }
    }
};
int main(){
    int n;
    cin>>n;
    vector<int> v(n);
    for(auto &i:v)cin>>i;
    SgTree s(n);
    s.build(1,0,n-1,v);
    int q;cin>>q;
    while(q--){
        int type;cin>>type;
        if(type==1){
            int l,r,val;
            cin>>l>>r>>val;
            s.update(1,0,n-1,l,r,val);
        }
        else{
            int l,r;
            cin>>l>>r;
            cout<<s.query(1,0,n-1,l,r)<<"\n";
        }
    }
    return 0;
}
